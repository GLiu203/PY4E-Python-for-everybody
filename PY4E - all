8.4 Open the file romeo.txt and read it line by line. For each line, split the line into a list of words using the split() method. The program should build a list of words. For each word on each line check to see if the word is already in the list and if not append it to the list. When the program completes, sort and print the resulting words in alphabetical order.

You can download the sample data at http://www.py4e.com/code3/romeo.txt

fname = input("Enter file name: ")

fh = open(fname)

lst = list()

for line in fh:

    line = line.rstrip().split()
    
    for i in line: 
    
        if i not in lst:
        
            lst.append(i)
            
lst.sort()

print(lst)


----------------------------------------------------------------------------------------------------------------------------------------
8.5 Open the file mbox-short.txt and read it line by line. When you find a line that starts with 'From ' like the following line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
You will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). Then print out a count at the end.
Hint: make sure not to include the lines that start with 'From:'.

You can download the sample data at http://www.py4e.com/code3/mbox-short.txt


Codes: 


fname = input("Enter file name: ")

if len(fname) < 1 : fname = "mbox-short.txt"

fh = open(fname)

count = 0

for line in fh:

    line = line.strip()
    
    if not line.startswith('From:'):
    
        continue
        
    list = line.split()
    
    print(list[1])
    
    count += 1
    

print("There were", count, "lines in the file with From as the first word")

----------------------------------------------------------------------------------------------------------------------------------------
9.4 Write a program to read through the mbox-short.txt and figure out who has sent the greatest number of mail messages. The program looks for 'From ' lines and takes the second word of those lines as the person who sent the mail. The program creates a Python dictionary that maps the sender's mail address to a count of the number of times they appear in the file. After the dictionary is produced, the program reads through the dictionary using a maximum loop to find the most prolific committer.

Codes: 

name = input("Enter file:")

if len(name) < 1 : name = "mbox-short.txt"

handle = open(name)

list = list()

dict = dict()

count = 0

for line in handle:

    if line.startswith('From') and not line.startswith('From:'):
    
      wds = line.split()[1]
      
      if wds in dict:
      
          dict[wds] = dict[wds] + 1
          
      else:
      
          dict[wds] = 1
          
print(wds, dict[wds])
         
----------------------------------------------------------------------------------------------------------------------------------------
10.2 Write a program to read through the mbox-short.txt and figure out the distribution by hour of the day for each of the messages. You can pull the hour out from the 'From ' line by finding the time and then splitting the string a second time using a colon.
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Once you have accumulated the counts for each hour, print out the counts, sorted by hour as shown below.

Codes: 

name = input("Enter file:")

if len(name) < 1 : name = "mbox-short.txt"

handle = open(name)

lst = list()

for line in handle:

    if line.startswith('From') and not line.startswith('From:'):
    
        line = line[-14:-12]
        
        lst.append(line)
        
lst.sort()

#print(lst)

counts = dict()

hours = lst

for hour in hours:

    if hour not in counts:
    
        counts[hour] = 1
        
    else:
    
        counts[hour] = counts[hour] +1

for k,v in counts.items():

    print(k,v)
    
----------------------------------------------------------------------------------------------------------------------------------------
11. Finding Numbers in a Haystack

In this assignment you will read through and parse a file with text and numbers. You will extract all the numbers in the file and compute the sum of the numbers.

Data Files
We provide two files for this assignment. One is a sample file where we give you the sum for your testing and the other is the actual data you need to process for the assignment.

import re

handle = open('actual.txt')

numlist = list()

for line in handle:

    line = line.rstrip()
    
    stuff = re.findall('[0-9]+', line)
    
    if len(stuff)<1: continue
    
    else:
    
        for i in stuff:
        
            numlist.append(i)
            
#print(numlist)

sum = 0

for num in numlist:

    sum += int(num)

print(sum)

----------------------------------------------------------------------------------------------------------------------------------------
12.1 Scraping Numbers from HTML using BeautifulSoup In this assignment you will write a Python program similar to http://www.py4e.com/code3/urllink2.py. The program will use urllib to read the HTML from the data files below, and parse the data, extracting numbers and compute the sum of the numbers in the file.

Codes: 

from urllib.request import urlopen

from bs4 import BeautifulSoup

import ssl

ctx = ssl.create_default_context()

ctx.check_hostname = False

ctx.verify_mode = ssl.CERT_NONE

url = input('Enter - ')

html = urlopen(url, context=ctx).read()

soup = BeautifulSoup(html, "html.parser")



count = 0

sum = 0

tags = soup('span')

for tag in tags:

    # Look at the parts of a tag
    
    print('TAG:', tag)
    
    print('URL:', tag.get('href', None))
    
    print('Contents:', tag.contents[0])
    
    print('Attrs:', tag.attrs)
    
    count += 1
    
    sum += int(tag.contents[0])
    
print(count)

print(sum)

----------------------------------------------------------------------------------------------------------------------------------------
13. Extracting Data from XML

In this assignment you will write a Python program somewhat similar to http://www.py4e.com/code3/geoxml.py. The program will prompt for a URL, read the XML data from that URL using urllib and then parse and extract the comment counts from the XML data, compute the sum of the numbers in the file.

Codes: 

import urllib.request as UR

import xml.etree.ElementTree as ET

url = input('URL: ')

print('Retrieving', url)

xml = UR.urlopen(url).read()

print('Retrieved', len(xml), 'characters')

count = 0

sum = 0

tree = ET.fromstring(xml)

counts = tree.findall('.//count')

for i in counts:

    count += 1
    
    sum += int(i.text)

print('Count:', count)

print('Sum:', sum)

----------------------------------------------------------------------------------------------------------------------------------------
15.2 Counting Organizations

This application will read the mailbox data (mbox.txt) and count the number of email messages per organization (i.e. domain name of the email address) using a database with the following schema to maintain the counts.

CREATE TABLE Counts (org TEXT, count INTEGER)

When you have run the program on mbox.txt upload the resulting database file above for grading.
If you run the program multiple times in testing or with dfferent files, make sure to empty out the data before each run.

Codes: 

import sqlite3 as sql

conn = sql.connect('mboxDB.sqlite')

cur = conn.cursor()

cur.execute('DROP TABLE IF EXISTS Counts')

cur.execute('CREATE TABLE Counts (org TEXT, count INTEGER)')

fh = open('mbox.txt')

for row in fh:

    if not row.startswith('From:'): continue
    
    email = row.split()[1]  # split() return a List.
    
    org = email[email.find('@') + 1 :]

    cur.execute('SELECT Count from Counts WHERE org = ?', (org,))
    
    num = cur.fetchone()
        
    if num is None:
        cur.execute('INSERT INTO Counts (org, count) VALUES (?, 1)', (org,))
        
    else:    
        cur.execute('UPDATE Counts SET Count = Count + 1 WHERE org = ?', (org,))
         
conn.commit()

----------------------------------------------------------------------------------------------------------------------------------------

15.3  Musical Track Database
If you run the program multiple times in testing or with different files, make sure to empty out the data before each run.

You can use this code as a starting point for your application: http://www.py4e.com/code3/tracks.zip. The ZIP file contains the Library.xml file to be used for this assignment. You can export your own tracks from iTunes and create a database, but for the database that you turn in for this assignment, only use the Library.xml data that is provided.

Codes: 

import xml.etree.ElementTree as ET
import sqlite3 as sql
conn = sql.connect('Library.sqlite')
cur = conn.cursor()

cur.executescript('''
DROP TABLE IF EXISTS Artist;
DROP TABLE IF EXISTS Genre;
DROP TABLE IF EXISTS Album;
DROP TABLE IF EXISTS Track;

CREATE TABLE Artist (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
  name TEXT UNIQUE);

CREATE TABLE Genre (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
  name TEXT UNIQUE);

CREATE TABLE Album (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
  title TEXT UNIQUE,
  artist_id INTEGER);

CREATE TABLE Track (
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
  title TEXT UNIQUE,
  album_id INTEGER,
  artist_id INTEGER,
  genre_id INTEGER,
  len INTEGER, rating INTEGER, count INTEGER)
''')

fh = open('Library.xml')

stuff = ET.parse('Library.xml')

all = stuff.findall('dict/dict/dict')

def lookup(d, key):
    found = False
    for child in d:
        if found : return child.text
        if child.tag == 'key' and child.text == key :
            found = True
    return None

for entry in all:

    if ( lookup(entry, 'Track ID') is None ) : continue
    
    title = lookup(entry, 'Name')
    
    artist = lookup(entry, 'Artist')
    
    album = lookup(entry, 'Album')
    
    count = lookup(entry, 'Play Count')
    
    rating = lookup(entry, 'Rating')
    
    length = lookup(entry, 'Total Time')
    
    genre = lookup(entry, 'Genre')
    
    if title is None or artist is None or album is None or genre is None:  continue

    cur.execute('INSERT OR IGNORE INTO Artist (name) VALUES (?)', (artist,))
    cur.execute('SELECT id FROM Artist WHERE name = ?', (artist,))
    artist_id = cur.fetchone()[0]  # need [0] b/c it return tuples: (490,)

    cur.execute('INSERT OR IGNORE INTO Genre (name) VALUES (?)', (genre,))
    cur.execute('SELECT id FROM Genre WHERE name = ?', (genre,))
    genre_id = cur.fetchone()[0]

    cur.execute('INSERT OR IGNORE INTO Album (title, artist_id) VALUES (?,?)', (album, artist_id))
    cur.execute('SELECT id FROM Album WHERE title = ?', (album,))
    album_id = cur.fetchone()[0]

    cur.execute('''INSERT OR IGNORE INTO Track (title, album_id, artist_id, genre_id, len, rating, count)
    VALUES (?,?,?,?,?,?,?)''', (title, album_id, artist_id, genre_id, length, rating, count))
    
conn.commit()

run this in SQLite:

SELECT Track.title, Artist.name, Album.title, Genre.name 
    FROM Track JOIN Genre JOIN Album JOIN Artist 
    ON Track.genre_id = Genre.ID and Track.album_id = Album.id 
        AND Album.artist_id = Artist.id
    ORDER BY Artist.name LIMIT 3
    
----------------------------------------------------------------------------------------------------------------------------------------
15.4 Instructions

This application will read roster data in JSON format, parse the file, and then produce an SQLite database that contains a User, Course, and Member table and populate the tables from the data file.

You can base your solution on this code: http://www.py4e.com/code3/roster/roster.py - this code is incomplete as you need to modify the program to store the role column in the Member table to complete the assignment.

Each student gets their own file for the assignment. Download this file and save it as roster_data.json. Move the downloaded file into the same folder as your roster.py program.

import json

import sqlite3 as sql

conn = sql.connect('rosterDB.sqlite')

cur = conn.cursor()

cur.executescript('''

DROP TABLE IF EXISTS User;

DROP TABLE IF EXISTS Course;

DROP TABLE IF EXISTS Member;

CREATE TABLE User (

    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    
    name TEXT);

CREATE TABLE Course (

    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    
    title TEXT);

CREATE TABLE Member (

    user_id INTEGER,
    
    course_id INTEGER,
    
    role INTEGER,
    
    PRIMARY KEY (user_id, course_id))
    
''')

fname = 'roster.json'

str_data = open(fname).read()

json_data = json.loads(str_data)

for entry in json_data:

    name = entry[0];
    
    title = entry[1];
    
    role = entry[2];
    
    print((name, title, role))

    cur.execute('''INSERT OR IGNORE INTO User (name)
    
        VALUES ( ? )''', ( name, ) )
        
    cur.execute('SELECT id FROM User WHERE name = ? ', (name, ))
    
    user_id = cur.fetchone()[0]

    cur.execute('''INSERT OR IGNORE INTO Course (title)
    
        VALUES ( ? )''', ( title, ) )
        
    cur.execute('SELECT id FROM Course WHERE title = ? ', (title, ))
    
    course_id = cur.fetchone()[0]

    cur.execute('''INSERT OR REPLACE INTO Member
    
        (user_id, course_id, role) VALUES ( ?, ?, ? )''',
        
        ( user_id, course_id , role) )

    conn.commit()

run this in SQL: 

SELECT hex(User.name || Course.title || Member.role ) AS X FROM 
    User JOIN Member JOIN Course 
    ON User.id = Member.user_id AND Member.course_id = Course.id
    ORDER BY X
